CKA Tips Kubernetes 1.21
In this section we'll provide some tips on how to handle the CKA exam and browser terminal.

 

Knowledge
Study all topics as proposed in the curriculum till you feel comfortable with all.

Resources

The majority of tasks in the CKA will also be around creating Kubernetes resources, like its tested in the CKAD. So we suggest to do:

Maybe 2â€“3 times https://github.com/dgkanatsios/CKAD-exercises
The CKAD series with scenarios on Medium    https://codeburst.io/kubernetes-ckad-weekly-challenges-overview-and-tips-7282b36a2681
The CKA series with scenarios on Medium     https://medium.com/@wuestkamp/kubernetes-cka-example-questions-practical-challenge-86318d85b4d?source=friends_link&sk=cb63eb0edd1210851f01df24b2142db2
Imagine and create your own scenarios to solve
Know advanced scheduling: https://kubernetes.io/docs/concepts/scheduling/kube-scheduler
Components

The other part is understanding Kubernetes components and being able to fix and investigate clusters. Understand this: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-cluster
When you have to fix a component (like kubelet) in one cluster, just check how its setup on another node in the same or even another cluster. You can copy config files over etc
If you like you can look at Kubernetes The Hard Way once. But it's NOT necessary to do, the CKA is not that complex. But KTHW helps understanding the concepts
You should install your own cluster using kubeadm (one master, one worker) in a VM or using a cloud provider and investigate the components
Know how to use kubeadm to for example add nodes to a cluster
Know how to create an Ingress resources
Know how to snapshot/restore ETCD from another machine
General

Do 1 or 2 test session with this CKA Simulator. Understand the solutions and maybe try out other ways to achieve the same thing.

Setup your aliases, be fast and breath kubectl


%%%%%%%%%% Browser Terminal Setup %%%%%%%%%%%

It should be considered to spend ~1 minute in the beginning to setup your terminal. In the real exam the vast majority of questions will be done from the main terminal. For few you might need to ssh into another machine. Just be aware that configurations to your shell will not be transferred in this case.

Minimal Setup
Alias

We would suggest to minimally setup this alias:

alias k=kubectl
which means you always run kubectl just with k.

Vim

Also create the file ~/.vimrc with the following content:

set tabstop=2
set expandtab
The expandtab make sure to use spaces for tabs. Memorize these and just type them down. You can't have any written notes with commands on your desktop etc.

Optional Setup
Variables

export do="--dry-run=client -o yaml"
This way you can just run k run pod1 --image=nginx $do. Short for "dry output", but use whatever you like.

Vim

You can also add the following to ~/.vimrc to be able to apply tab on multiple selected lines.

set shiftwidth=2
More further down in the vim section.

Kubectl autocompletion

Depending on how much is already pre-installed but it should be enough for these two lines:

source <(kubectl completion bash)
complete -F __start_kubectl k # to make it work with the alias k

Else you need to run these lines before:

sudo apt-get install bash-completion
source ~/.bashrc

Persist bash settings

You can store aliases and other setup in ~/.bashrc if you're planning on using different shells or tmux.

 

Be fast
Use the history command to reuse already entered commands or use even faster history search through Ctrl r .

If a command takes some time to execute, like sometimes kubectl delete pod x. You can put a task in the background using Ctrl z and pull it back into foreground running command fg.

You can delete pods fast with:

k delete pod x --grace-period 0 --force
 

Vim
Be great with vim.

toggle vim line numbers

When in vim you can press Esc and type :set number or :set nonumber followed by Enter to toggle line numbers. This can be useful when finding syntax errors based on line - but can be bad when wanting to mark&copy by mouse. You can also just jump to a line number with Esc :22 + Enter.

copy&paste

Get used to copy/paste/cut with vim:

Mark lines: Esc+V (then arrow keys)
Copy marked lines: y
Cut marked lines: d
Past lines: p or P

Indent multiple lines

To indent multiple lines press Esc and type :set shiftwidth=2. First mark multiple lines using Shift v and the up/down keys. Then to indent the marked lines press > or <. You can then press . to repeat the action.

 

Split terminal screen
By default tmux is installed and can be used to split your one terminal into multiple. But just do this if you know your shit, because scrolling is different and copy&pasting might be weird.

https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux
